{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteID","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,kC,yICkDXC,EA5CQ,SAACC,GACtB,IAAMC,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAErBC,EAAmBR,EAAnBQ,eAENC,qBAAU,WACO,cAAXH,GAA2BC,GAC7BC,MAED,CAAEF,EAAQC,EAAOC,IAEtB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBAIN,IAAMC,EAAcZ,EAAea,QAAQC,MAG3CV,EAAY,CAAEW,YAAa,CAAEC,KAAMJ,GAAeK,QAASlB,EAAMkB,WAGnE,OACE,uBAAMC,UAAWC,IAAQC,KAAMC,SAAUZ,EAAzC,UAEe,YAAXJ,GACA,qBAAKa,UAAU,WAAf,SACE,cAACI,EAAA,EAAD,MAIJ,sBAAKJ,UAAWC,IAAQI,QAASF,SAAUZ,EAA3C,UACE,uBAAOe,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAK3B,OAEvC,qBAAKkB,UAAWC,IAAQS,QAAxB,SACE,wBAAQV,UAAU,MAAlB,+B,iBCnCOW,EARK,SAAC9B,GACnB,OACE,oBAAImB,UAAWC,IAAQW,KAAvB,SACE,4BAAI/B,EAAMiB,U,iBCQDe,EAVM,SAAChC,GACpB,OACE,oBAAImB,UAAWC,IAAQa,SAAvB,SACGjC,EAAMiC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BlB,KAAMkB,EAAQlB,MAA1BkB,EAAQT,UCsDnBU,EAnDE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAGQrB,EADOsB,cACPtB,QAER,EAAsDf,YAAQsC,KAAtDpC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcoC,EAAnC,EAA6BC,KAE7BlC,qBAAU,WACRJ,EAAYa,KACX,CAAEA,EAASb,IAEd,IAQI4B,EAJEW,EAAsBC,uBAAY,WACtCxC,EAAYa,KACX,CAAEb,EAAaa,IAmBlB,MAfgB,YAAXZ,IACH2B,EACE,qBAAKd,UAAU,WAAf,SACE,cAACI,EAAA,EAAD,OAIS,cAAXjB,GAA2BoC,GAAkBA,EAAeI,OAAS,IACvEb,EAAW,cAAC,EAAD,CAAcA,SAAaS,KAGzB,cAAXpC,GAA4BoC,GAA4C,IAA1BA,EAAeI,SAC/Db,EAAW,mBAAGd,UAAU,WAAb,0CAIX,0BAASA,UAAWC,IAAQa,SAA5B,UACE,gDACEK,GACA,wBAAQnB,UAAU,MAAM4B,QA7BC,WAC7BR,GAAmB,IA4Bf,2BAIDD,GAAmB,cAAC,EAAD,CAAgBpB,QAAYA,EAAUV,eAAmBoC,IAC3EX,M,iBC7COe,EATU,SAAChD,GACxB,OACE,yBAAQmB,UAAWC,IAAQ6B,MAA3B,UACE,4BAAIjD,EAAMiB,OACV,qCAAajB,EAAMkD,aCgEVC,UA7DK,WAEhB,IAAMC,EAAQC,cAGNnC,EAFOsB,cAEPtB,QAER,EAA0Df,YAAQmD,KAAgB,GAA1EjD,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAciD,EAAnC,EAA6BZ,KAAmBpC,EAAhD,EAAgDA,MAMhD,OAJAE,qBAAU,WACNJ,EAAaa,KACd,CAAEb,EAAaa,IAEH,YAAXZ,EAEI,qBAAKa,UAAU,WAAf,SACI,cAACI,EAAA,EAAD,MAKRhB,EAEI,mBAAGY,UAAU,WAAb,SACKZ,IAKRgD,EAAYtC,KAOb,eAAC,WAAD,WAEI,cAAC,EAAD,CAAkBA,KAASsC,EAAYtC,KAAMiC,OAAWK,EAAYL,SAEpE,cAAC,IAAD,CAAOM,KAAMJ,EAAMI,KAAMC,OAAK,EAA9B,SAEI,qBAAKtC,UAAU,WAAf,SACI,cAAC,IAAD,CAAMuC,GAAE,UAAKN,EAAMO,IAAX,aAA2BxC,UAAU,YAA7C,+BAKR,eAAC,IAAD,CAAOqC,KAAI,UAAOJ,EAAMI,KAAb,aAAX,UAEI,qBAAKrC,UAAU,WAAf,SACI,cAAC,IAAD,CAAMuC,GAAE,UAAKN,EAAMO,KAAOxC,UAAU,YAApC,6BAGJ,cAAC,EAAD,UAvBJ,mBAAGA,UAAU,WAAb","file":"static/js/4.714a10f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment)\n\n  const { onAddedComment } = props\n\n    useEffect(() => {\n      if (status === \"completed\" && !error) {\n        onAddedComment()\n      }\n    }, [ status, error, onAddedComment ])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    const enteredText = commentTextRef.current.value\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteID: props.quoteID })\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n\n      { status === \"pending\" && \n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      }\n\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from \"./CommentsList\"\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  \n  const params = useParams()\n  const { quoteID } = params\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments)\n\n  useEffect(() => {\n    sendRequest(quoteID)\n  }, [ quoteID, sendRequest ])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteID)\n  }, [ sendRequest, quoteID ])\n\n  let comments\n\n  if ( status === \"pending\") {\n    comments = \n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n  }\n\n  if (status === \"completed\" && (loadedComments && loadedComments.length > 0)) {\n    comments = <CommentsList comments = { loadedComments } />\n  }\n\n  if (status === \"completed\" && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>No comments were added yet!</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteID = { quoteID } onAddedComment = { addedCommentHandler } />}\n      { comments }\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route, Link, useRouteMatch } from \"react-router-dom\"\nimport { Fragment, useEffect } from \"react\"\n\nimport Comments from \"../components/comments/Comments\"\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\"\nimport useHttp from \"../hooks/use-http\"\nimport { getSingleQuote } from \"../lib/api\"\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\"\n\nconst QuoteDetail = () => {\n\n    const match = useRouteMatch()\n    const params = useParams()\n\n    const { quoteID } = params\n\n    const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true)\n\n    useEffect(() => {\n        sendRequest( quoteID )\n    }, [ sendRequest, quoteID ])\n\n    if (status === \"pending\") {\n        return (\n            <div className=\"centered\">\n                <LoadingSpinner />\n            </div>\n        )\n    }\n\n    if (error) {\n        return (\n            <p className=\"centered\">\n                {error}\n            </p>\n        )\n    }\n\n    if (!loadedQuote.text) {\n        return (\n            <p className=\"centered\">No quote found!</p>\n        )\n    }\n\n    return (\n        <Fragment>\n\n            <HighlightedQuote text = { loadedQuote.text} author = { loadedQuote.author} />\n\n            <Route path={match.path} exact>\n\n                <div className=\"centered\">\n                    <Link to={`${match.url}/comments`} className=\"btn--flat\">Load Comments</Link>\n                </div>\n                \n            </Route>\n\n            <Route path = {`${match.path}/comments`} >\n\n                <div className=\"centered\">\n                    <Link to={`${match.url}`} className=\"btn--flat\">Hide Comments</Link>\n                </div>\n\n                <Comments />\n            </Route>\n\n        </Fragment>\n    )\n}\n\nexport default QuoteDetail"],"sourceRoot":""}