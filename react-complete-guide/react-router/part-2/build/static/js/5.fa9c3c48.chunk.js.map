{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,gGCmBdC,EAjBG,SAACC,GAEjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAA3C,iC,iBCyCSC,EAtCG,SAACR,GAEjB,IAZkBS,EAAQC,EAYpBC,EAAUC,cACVC,EAAWC,cAIXC,EAAiD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAjBzBT,EAmBcT,EAAMS,OAnBZC,EAmBoBK,EAlBvCN,EAAOU,MAAK,SAACC,EAAQC,GAC1B,OAAIX,EACKU,EAAOb,GAAKc,EAAOd,GAAK,GAAK,EAE7Ba,EAAOb,GAAKc,EAAOd,GAAK,GAAK,KAoBxC,OACE,eAAC,WAAD,WAEE,qBAAKN,UAAYC,IAAQoB,QAAzB,SAEE,yBAAQC,QATgB,WAC5BZ,EAAQa,KAAR,UAAgBX,EAASY,SAAzB,iBAA2CV,EAAqB,OAAS,SAQrE,kBAAmDA,EAAqB,aAAe,YAAvF,SAIF,oBAAId,UAAWC,IAAQwB,KAAvB,SACG1B,EAAMS,OAAOkB,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEErB,GAAIqB,EAAMrB,GACVF,OAAQuB,EAAMvB,OACdD,KAAMwB,EAAMxB,MAHPwB,EAAMrB,a,iCC3BRsB,EAbO,WACpB,OACE,sBAAK5B,UAAWC,IAAQ4B,SAAxB,UACE,iDAEA,cAAC,IAAD,CAAM7B,UAAU,MAAMK,GAAG,aAAzB,6BCiCSyB,UAjCG,WAEd,MAAyDC,YAAQC,KAAc,GAAvEC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAaC,EAAlC,EAA6BC,KAAmBC,EAAhD,EAAgDA,MAMhD,OAJAC,qBAAU,WACNL,MACD,CAAEA,IAEU,YAAXC,EAEI,qBAAKlC,UAAU,WAAf,SACI,cAACuC,EAAA,EAAD,MAKRF,EAEI,mBAAGrC,UAAW,mBAAd,SAAmCqC,IAI5B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAOzD,cAAC,EAAD,CAAWhC,OAAW2B,IALlB,cAAC,EAAD","file":"static/js/5.fa9c3c48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","import { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className='btn' to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { useHistory, useLocation } from \"react-router-dom\"\nimport { Fragment } from 'react';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n\n  const history = useHistory()\n  const location = useLocation()\n\n  const queryParams = new URLSearchParams(location.search)\n\n  const isSortingAscending = queryParams.get('sort') === \"asc\"\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending)\n\n  const changeShortingHandler = () => {\n    history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`)\n  }\n\n  return (\n    <Fragment>\n\n      <div className={ classes.sorting } >\n\n        <button onClick= { changeShortingHandler } >Sort { isSortingAscending ? 'Descending' : 'Ascending'} </button>\n\n      </div>\n\n      <ul className={classes.list}>\n        {props.quotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import classes from './NoQuotesFound.module.css';\nimport { Link } from 'react-router-dom';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n\n      <Link className='btn' to=\"/new-quote\">\n        Add a Quote\n      </Link>\n      \n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from \"react\"\n\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\"\nimport QuoteList from \"../components/quotes/QuoteList\"\nimport useHttp from \"../hooks/use-http\"\nimport { getAllQuotes } from \"../lib/api\"\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\"\n\nconst AllQuotes = () => {\n\n    const { sendRequest, status, data:loadedQuotes, error} = useHttp(getAllQuotes, true)\n\n    useEffect(() => {\n        sendRequest()\n    }, [ sendRequest ])\n\n    if (status === \"pending\") {\n        return (\n            <div className=\"centered\">\n                <LoadingSpinner />\n            </div>\n        )\n    }\n\n    if (error) {\n        return (\n            <p className= \"centered focused\">{ error }</p>\n        )\n    }\n\n    if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\n        return (\n            <NoQuotesFound />\n        )\n    }\n\n    return (\n        <QuoteList quotes = { loadedQuotes } />\n    )\n}\n\nexport default AllQuotes"],"sourceRoot":""}